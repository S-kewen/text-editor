/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lexi.view;

import java.awt.FileDialog;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.border.Border;
import lexi.imp.composite.Content;
import lexi.imp.composite.ConcreteVocabulary;
import lexi.imp.composite.Alphabet;
import lexi.imp.abstractFactory.DefaultScrollBarAbstractFactory;
import lexi.imp.abstractFactory.RedScrollBarAbstractFactory;
import lexi.imp.abstractFactory.ScrollBarAbstractFactory;
import lexi.imp.bridge.LinuxDisplayImp;
import lexi.imp.bridge.WindowsDisplayImp;
import lexi.imp.decorator.HorizontalScorllBarDecorator;
import lexi.imp.decorator.VerticalScorllBarDecorator;
import lexi.imp.factoryMethod.BlueTextBorderFactory;
import lexi.imp.factoryMethod.DefaultTextBorderFactory;
import lexi.imp.iterator.Iterator;
import lexi.imp.strategy.BigFontStrategy;
import lexi.imp.strategy.MediumFontStrategy;
import lexi.imp.strategy.SmallFontStrategy;
import lexi.imp.visitor.VocabularyChecker;
import lexi.imp.factoryMethod.TextBorderFactory;
import lexi.imp.bridge.ConsoleDisplay;
import lexi.imp.command.AllSelectCommand;
import lexi.imp.command.CopyCommand;
import lexi.imp.command.CutCommand;
import lexi.imp.command.DeleteCommand;
import lexi.imp.command.PasteCommand;
import lexi.imp.decorator.VisualComponent;
import lexi.imp.command.EditCommand;

/**
 * @pattern
 * Composite、Decorator、Strategy、FactoryMethod、AbstractFactory、Bridge、Command、Iterator、Visitor
 * @type
 * Client、ConcreteComponent、Context、Client、Client、Client、(Invoker、Receiver)、Client、Client
 * @author Skwen
 */
public class Main extends javax.swing.JFrame implements VisualComponent {

    Content content;
    String[] strs;
    String fileName = "";

    /**
     * Creates new form main
     */
    public Main() {
        initComponents();
    }

    public void createTree() {
        content = new ConcreteVocabulary();
        String str = jTextArea_TextView.getText();
        strs = str.split("\\s+|\n|\\,|\\.|\\!|\\?");

        for (int i = 0; i < strs.length; i++) {

            Content composite = new ConcreteVocabulary();
            char[] chars = strs[i].toCharArray();

            for (int j = 0; j < chars.length; j++) {
                composite.addChild(new Alphabet(chars[j]));
            }
            content.addChild(composite);
        }
    }

    @Override
    public JScrollPane draw(JScrollPane jScrollPane) {
        return jScrollPane_TextView;
    }

    @Override
    public JScrollPane undraw(JScrollPane jScrollPane) {
        return jScrollPane_TextView;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_ScrollBar = new javax.swing.ButtonGroup();
        jFrame_Main = new javax.swing.JFrame();
        buttonGroup_ContentBorder = new javax.swing.ButtonGroup();
        buttonGroup_Style = new javax.swing.ButtonGroup();
        jScrollPane_TextView = new javax.swing.JScrollPane();
        jTextArea_TextView = new javax.swing.JTextArea();
        jMenuBar_Top = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_New = new javax.swing.JMenuItem();
        jMenuItem_Open = new javax.swing.JMenuItem();
        jMenuItem_Save = new javax.swing.JMenuItem();
        jMenuItem_SaveAs = new javax.swing.JMenuItem();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();
        jMenuItem_AllSelect = new javax.swing.JMenuItem();
        jSeparator_Edit = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Cut = new javax.swing.JMenuItem();
        jMenuItem_Copy = new javax.swing.JMenuItem();
        jMenuItem_Paste = new javax.swing.JMenuItem();
        jMenuItem_Delete = new javax.swing.JMenuItem();
        jMenu_Style = new javax.swing.JMenu();
        jRadioButtonMenuItem_Small = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_Medium = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_Big = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_AutoWrap = new javax.swing.JRadioButtonMenuItem();
        jMenu_View = new javax.swing.JMenu();
        jRadioButtonMenuItem_H_ScrollBar = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_V_ScrollBar = new javax.swing.JRadioButtonMenuItem();
        jMenu_ScrollBar = new javax.swing.JMenu();
        jRadioButtonMenuItem_ScrollBar_Default = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_ScrollBar_Red = new javax.swing.JRadioButtonMenuItem();
        jMenu_ContentBorder = new javax.swing.JMenu();
        jRadioButtonMenuItem_ContentBorder_Default = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem_ContentBorder_Blue = new javax.swing.JRadioButtonMenuItem();
        jMenu_Tools = new javax.swing.JMenu();
        jMenuItem_Tree = new javax.swing.JMenuItem();
        jMenuItem_SpellChecker = new javax.swing.JMenuItem();
        jMenu_Print = new javax.swing.JMenu();
        jMenuItem_Linux = new javax.swing.JMenuItem();
        jMenuItem_Windows = new javax.swing.JMenuItem();
        jMenu_About = new javax.swing.JMenu();
        jMenuItem_About = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame_MainLayout = new javax.swing.GroupLayout(jFrame_Main.getContentPane());
        jFrame_Main.getContentPane().setLayout(jFrame_MainLayout);
        jFrame_MainLayout.setHorizontalGroup(
            jFrame_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame_MainLayout.setVerticalGroup(
            jFrame_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Editor");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jTextArea_TextView.setColumns(20);
        jTextArea_TextView.setRows(5);
        jTextArea_TextView.setAutoscrolls(false);
        jTextArea_TextView.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane_TextView.setViewportView(jTextArea_TextView);

        jMenuBar_Top.setBackground(new java.awt.Color(204, 204, 204));
        jMenuBar_Top.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar_Top.setToolTipText("");
        jMenuBar_Top.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jMenuBar_TopAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jMenu_File.setText("File");

        jMenuItem_New.setText("New");
        jMenuItem_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NewActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_New);

        jMenuItem_Open.setText("Open");
        jMenuItem_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OpenActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Open);

        jMenuItem_Save.setText("Save");
        jMenuItem_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save);

        jMenuItem_SaveAs.setText("SaveAs");
        jMenuItem_SaveAs.setToolTipText("");
        jMenuItem_SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveAsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_SaveAs);

        jMenuItem_Exit.setText("Exit");
        jMenuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Exit);

        jMenuBar_Top.add(jMenu_File);

        jMenu_Edit.setText("Edit");

        jMenuItem_AllSelect.setText("SelectAll");
        jMenuItem_AllSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AllSelectActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_AllSelect);
        jMenu_Edit.add(jSeparator_Edit);

        jMenuItem_Cut.setText("Cut");
        jMenuItem_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CutActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_Cut);

        jMenuItem_Copy.setText("Copy");
        jMenuItem_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_CopyActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_Copy);

        jMenuItem_Paste.setText("Paste");
        jMenuItem_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_PasteActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_Paste);

        jMenuItem_Delete.setText("Delete");
        jMenuItem_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_DeleteActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_Delete);

        jMenuBar_Top.add(jMenu_Edit);

        jMenu_Style.setText("Style");

        buttonGroup_Style.add(jRadioButtonMenuItem_Small);
        jRadioButtonMenuItem_Small.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 8)); // NOI18N
        jRadioButtonMenuItem_Small.setText("Gnu");
        jRadioButtonMenuItem_Small.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_SmallActionPerformed(evt);
            }
        });
        jMenu_Style.add(jRadioButtonMenuItem_Small);

        buttonGroup_Style.add(jRadioButtonMenuItem_Medium);
        jRadioButtonMenuItem_Medium.setSelected(true);
        jRadioButtonMenuItem_Medium.setText("Gnu");
        jRadioButtonMenuItem_Medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_MediumActionPerformed(evt);
            }
        });
        jMenu_Style.add(jRadioButtonMenuItem_Medium);

        buttonGroup_Style.add(jRadioButtonMenuItem_Big);
        jRadioButtonMenuItem_Big.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 18)); // NOI18N
        jRadioButtonMenuItem_Big.setText("Gnu");
        jRadioButtonMenuItem_Big.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_BigActionPerformed(evt);
            }
        });
        jMenu_Style.add(jRadioButtonMenuItem_Big);

        jRadioButtonMenuItem_AutoWrap.setText("AutoWrap");
        jRadioButtonMenuItem_AutoWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_AutoWrapActionPerformed(evt);
            }
        });
        jMenu_Style.add(jRadioButtonMenuItem_AutoWrap);

        jMenuBar_Top.add(jMenu_Style);

        jMenu_View.setText("View");

        jRadioButtonMenuItem_H_ScrollBar.setText("H-ScrollBar");
        jRadioButtonMenuItem_H_ScrollBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonMenuItem_H_ScrollBarStateChanged(evt);
            }
        });
        jRadioButtonMenuItem_H_ScrollBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonMenuItem_H_ScrollBarMouseClicked(evt);
            }
        });
        jRadioButtonMenuItem_H_ScrollBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_H_ScrollBarActionPerformed(evt);
            }
        });
        jMenu_View.add(jRadioButtonMenuItem_H_ScrollBar);

        jRadioButtonMenuItem_V_ScrollBar.setText("V-ScrollBar");
        jRadioButtonMenuItem_V_ScrollBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonMenuItem_V_ScrollBarStateChanged(evt);
            }
        });
        jRadioButtonMenuItem_V_ScrollBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButtonMenuItem_V_ScrollBarMouseClicked(evt);
            }
        });
        jRadioButtonMenuItem_V_ScrollBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_V_ScrollBarActionPerformed(evt);
            }
        });
        jRadioButtonMenuItem_V_ScrollBar.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jRadioButtonMenuItem_V_ScrollBarVetoableChange(evt);
            }
        });
        jMenu_View.add(jRadioButtonMenuItem_V_ScrollBar);

        jMenu_ScrollBar.setText("ScrollBar");

        buttonGroup_ScrollBar.add(jRadioButtonMenuItem_ScrollBar_Default);
        jRadioButtonMenuItem_ScrollBar_Default.setSelected(true);
        jRadioButtonMenuItem_ScrollBar_Default.setText("Default");
        jRadioButtonMenuItem_ScrollBar_Default.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_ScrollBar_DefaultActionPerformed(evt);
            }
        });
        jMenu_ScrollBar.add(jRadioButtonMenuItem_ScrollBar_Default);

        buttonGroup_ScrollBar.add(jRadioButtonMenuItem_ScrollBar_Red);
        jRadioButtonMenuItem_ScrollBar_Red.setText("Red");
        jRadioButtonMenuItem_ScrollBar_Red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_ScrollBar_RedActionPerformed(evt);
            }
        });
        jMenu_ScrollBar.add(jRadioButtonMenuItem_ScrollBar_Red);

        jMenu_View.add(jMenu_ScrollBar);

        jMenu_ContentBorder.setText("ContentBorder");

        buttonGroup_ContentBorder.add(jRadioButtonMenuItem_ContentBorder_Default);
        jRadioButtonMenuItem_ContentBorder_Default.setSelected(true);
        jRadioButtonMenuItem_ContentBorder_Default.setText("Default");
        jRadioButtonMenuItem_ContentBorder_Default.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_ContentBorder_DefaultActionPerformed(evt);
            }
        });
        jMenu_ContentBorder.add(jRadioButtonMenuItem_ContentBorder_Default);

        buttonGroup_ContentBorder.add(jRadioButtonMenuItem_ContentBorder_Blue);
        jRadioButtonMenuItem_ContentBorder_Blue.setText("Blue");
        jRadioButtonMenuItem_ContentBorder_Blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItem_ContentBorder_BlueActionPerformed(evt);
            }
        });
        jMenu_ContentBorder.add(jRadioButtonMenuItem_ContentBorder_Blue);

        jMenu_View.add(jMenu_ContentBorder);

        jMenuBar_Top.add(jMenu_View);

        jMenu_Tools.setText("Tools");

        jMenuItem_Tree.setText("Tree");
        jMenuItem_Tree.setToolTipText("");
        jMenuItem_Tree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_TreeActionPerformed(evt);
            }
        });
        jMenu_Tools.add(jMenuItem_Tree);

        jMenuItem_SpellChecker.setText("SpellChecker");
        jMenuItem_SpellChecker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SpellCheckerActionPerformed(evt);
            }
        });
        jMenu_Tools.add(jMenuItem_SpellChecker);

        jMenuBar_Top.add(jMenu_Tools);

        jMenu_Print.setText("Print");

        jMenuItem_Linux.setText("Linux");
        jMenuItem_Linux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_LinuxActionPerformed(evt);
            }
        });
        jMenu_Print.add(jMenuItem_Linux);

        jMenuItem_Windows.setText("Windows");
        jMenuItem_Windows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_WindowsActionPerformed(evt);
            }
        });
        jMenu_Print.add(jMenuItem_Windows);

        jMenuBar_Top.add(jMenu_Print);

        jMenu_About.setText("Help");

        jMenuItem_About.setText("About");
        jMenuItem_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AboutActionPerformed(evt);
            }
        });
        jMenu_About.add(jMenuItem_About);

        jMenuBar_Top.add(jMenu_About);

        setJMenuBar(jMenuBar_Top);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_TextView, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane_TextView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonMenuItem_H_ScrollBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_H_ScrollBarStateChanged

    }//GEN-LAST:event_jRadioButtonMenuItem_H_ScrollBarStateChanged

    private void jRadioButtonMenuItem_V_ScrollBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_V_ScrollBarStateChanged

    }//GEN-LAST:event_jRadioButtonMenuItem_V_ScrollBarStateChanged

    private void jRadioButtonMenuItem_V_ScrollBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_V_ScrollBarMouseClicked

    }//GEN-LAST:event_jRadioButtonMenuItem_V_ScrollBarMouseClicked

    private void jRadioButtonMenuItem_H_ScrollBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_H_ScrollBarMouseClicked

    }//GEN-LAST:event_jRadioButtonMenuItem_H_ScrollBarMouseClicked

    private void jRadioButtonMenuItem_V_ScrollBarVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jRadioButtonMenuItem_V_ScrollBarVetoableChange

    }//GEN-LAST:event_jRadioButtonMenuItem_V_ScrollBarVetoableChange

    private void jRadioButtonMenuItem_H_ScrollBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_H_ScrollBarActionPerformed
        HorizontalScorllBarDecorator horizontalScrollDecorator = new HorizontalScorllBarDecorator(this);
        if (jRadioButtonMenuItem_H_ScrollBar.isSelected()) {
            horizontalScrollDecorator.draw(jScrollPane_TextView);
        } else {
            horizontalScrollDecorator.undraw(jScrollPane_TextView);
        }

    }//GEN-LAST:event_jRadioButtonMenuItem_H_ScrollBarActionPerformed

    private void jRadioButtonMenuItem_V_ScrollBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_V_ScrollBarActionPerformed
        VerticalScorllBarDecorator verticalScrollDecorator1 = new VerticalScorllBarDecorator(this);
        if (jRadioButtonMenuItem_V_ScrollBar.isSelected()) {
            verticalScrollDecorator1.draw(jScrollPane_TextView);
        } else {
            verticalScrollDecorator1.undraw(jScrollPane_TextView);
        }

    }//GEN-LAST:event_jRadioButtonMenuItem_V_ScrollBarActionPerformed

    private void jMenuItem_TreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_TreeActionPerformed
        createTree();
        for (int i = 0; i < strs.length; i++) {
            System.out.println("composite " + i + ": " + content.getChild(i).getCount());
        }

    }//GEN-LAST:event_jMenuItem_TreeActionPerformed

    private void jMenuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OpenActionPerformed
        FileDialog fileDialog = new FileDialog(jFrame_Main, "Open", FileDialog.LOAD);
        fileDialog.setVisible(true);
        try {
            File file = new File(fileDialog.getDirectory(), fileDialog.getFile());
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            fileName = fileDialog.getDirectory() + fileDialog.getFile();
            String aline;
            String str = "";
            jTextArea_TextView.setText("");
            int count = 0;
            while ((aline = bufferedReader.readLine()) != null) {
                if (count > 0) {
                    jTextArea_TextView.append("\r\n");
                }
                jTextArea_TextView.append(aline);
                count++;
            }
            fileReader.close();
            bufferedReader.close();

        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }//GEN-LAST:event_jMenuItem_OpenActionPerformed

    private void jMenuItem_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AboutActionPerformed
        JOptionPane.showMessageDialog(null, "The third group demo!", "information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem_AboutActionPerformed

    private void jMenuItem_LinuxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_LinuxActionPerformed
        ConsoleDisplay d1 = new ConsoleDisplay(new LinuxDisplayImp(jTextArea_TextView.getText()));
        d1.display();
    }//GEN-LAST:event_jMenuItem_LinuxActionPerformed

    private void jMenuItem_WindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_WindowsActionPerformed
        ConsoleDisplay d2 = new ConsoleDisplay(new WindowsDisplayImp(jTextArea_TextView.getText()));
        d2.display();
    }//GEN-LAST:event_jMenuItem_WindowsActionPerformed

    private void jMenuItem_SpellCheckerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SpellCheckerActionPerformed
        Long time = System.currentTimeMillis();
        System.out.println("spell checking...");
        createTree();
        Iterator iterator = content.createIterator();
        VocabularyChecker vocabularyChecker = new VocabularyChecker();
        while (iterator.hasNext()) {
            ConcreteVocabulary concreteVocabulary = (ConcreteVocabulary) iterator.getNext();
            concreteVocabulary.accept(vocabularyChecker);
        }
        System.out.println("spell checked");
        System.out.println("Time consuming:" + (System.currentTimeMillis() - time)+"Ms");
    }//GEN-LAST:event_jMenuItem_SpellCheckerActionPerformed

    private void jMenuBar_TopAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jMenuBar_TopAncestorAdded

    }//GEN-LAST:event_jMenuBar_TopAncestorAdded

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //System.out.println("app init");
        Font font = new Font("Monospaced", 1, 13);
        jTextArea_TextView.setFont(font);
    }//GEN-LAST:event_formComponentShown

    private void jMenuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem_ExitActionPerformed

    private void jMenuItem_SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveAsActionPerformed
        FileDialog fileDialog = new FileDialog(jFrame_Main, "Save", FileDialog.SAVE);
        fileDialog.setVisible(true);
        FileOutputStream fileOutputStream = null;
        try {
            fileOutputStream = new FileOutputStream(fileDialog.getDirectory() + fileDialog.getFile() + ".txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            fileOutputStream.write(jTextArea_TextView.getText().getBytes());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            fileOutputStream.close();
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem_SaveAsActionPerformed

    private void jMenuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveActionPerformed
        if (fileName == "") {
            FileDialog fileDialog = new FileDialog(jFrame_Main, "Save", FileDialog.SAVE);
            fileDialog.setVisible(true);
            FileOutputStream fileOutputStream = null;
            try {
                fileOutputStream = new FileOutputStream(fileDialog.getDirectory() + fileDialog.getFile() + ".txt");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileOutputStream.write(jTextArea_TextView.getText().getBytes());
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileOutputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            fileDialog.setDirectory(jTextArea_TextView.getText());
        } else {
            FileOutputStream fileOutputStream = null;
            try {
                fileOutputStream = new FileOutputStream(fileName);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileOutputStream.write(jTextArea_TextView.getText().getBytes());
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                fileOutputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem_SaveActionPerformed

    private void jRadioButtonMenuItem_ScrollBar_DefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_ScrollBar_DefaultActionPerformed
        System.out.println("scroll bar color changed - default");
        ScrollBarAbstractFactory defaultScrollBarAbstractFactory = new DefaultScrollBarAbstractFactory();
        jScrollPane_TextView.getHorizontalScrollBar().setUI(defaultScrollBarAbstractFactory.getHorizontalScrollBar());
        jScrollPane_TextView.getVerticalScrollBar().setUI(defaultScrollBarAbstractFactory.getVerticalScrollBar());
    }//GEN-LAST:event_jRadioButtonMenuItem_ScrollBar_DefaultActionPerformed

    private void jRadioButtonMenuItem_ScrollBar_RedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_ScrollBar_RedActionPerformed
        System.out.println("scroll bar color changed - red");
        ScrollBarAbstractFactory redScrollBarAbstractFactory = new RedScrollBarAbstractFactory();
        jScrollPane_TextView.getHorizontalScrollBar().setUI(redScrollBarAbstractFactory.getHorizontalScrollBar());
        jScrollPane_TextView.getVerticalScrollBar().setUI(redScrollBarAbstractFactory.getVerticalScrollBar());
    }//GEN-LAST:event_jRadioButtonMenuItem_ScrollBar_RedActionPerformed

    private void jRadioButtonMenuItem_ContentBorder_DefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_ContentBorder_DefaultActionPerformed
        System.out.println("content border changed - default");
        TextBorderFactory factory = new DefaultTextBorderFactory();
        Border border = factory.createBorder();
        jTextArea_TextView.setBorder(border);
    }//GEN-LAST:event_jRadioButtonMenuItem_ContentBorder_DefaultActionPerformed

    private void jRadioButtonMenuItem_ContentBorder_BlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_ContentBorder_BlueActionPerformed
        System.out.println("content border changed - blue");
        TextBorderFactory blueTextBorderFactory = new BlueTextBorderFactory();
        Border border = blueTextBorderFactory.createBorder();
        jTextArea_TextView.setBorder(border);
    }//GEN-LAST:event_jRadioButtonMenuItem_ContentBorder_BlueActionPerformed

    private void jRadioButtonMenuItem_SmallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_SmallActionPerformed
        SmallFontStrategy smallFontStrategy = new SmallFontStrategy();
        smallFontStrategy.execute(jTextArea_TextView);
    }//GEN-LAST:event_jRadioButtonMenuItem_SmallActionPerformed

    private void jRadioButtonMenuItem_BigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_BigActionPerformed
        BigFontStrategy bigFontStrategy = new BigFontStrategy();
        bigFontStrategy.execute(jTextArea_TextView);
    }//GEN-LAST:event_jRadioButtonMenuItem_BigActionPerformed

    private void jRadioButtonMenuItem_MediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_MediumActionPerformed
        MediumFontStrategy mediumFontStrategy = new MediumFontStrategy();
        mediumFontStrategy.execute(jTextArea_TextView);
    }//GEN-LAST:event_jRadioButtonMenuItem_MediumActionPerformed

    private void jMenuItem_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_NewActionPerformed
        jTextArea_TextView.setText("");
        fileName = "";
    }//GEN-LAST:event_jMenuItem_NewActionPerformed

    private void jRadioButtonMenuItem_AutoWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem_AutoWrapActionPerformed
        if (jRadioButtonMenuItem_AutoWrap.isSelected()) {
            jTextArea_TextView.setLineWrap(true);
        } else {
            jTextArea_TextView.setLineWrap(false);
        }
    }//GEN-LAST:event_jRadioButtonMenuItem_AutoWrapActionPerformed

    private void jMenuItem_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CutActionPerformed
        EditCommand cut = new CutCommand();
        cut.execute(jTextArea_TextView);
    }//GEN-LAST:event_jMenuItem_CutActionPerformed

    private void jMenuItem_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_CopyActionPerformed
        EditCommand copy = new CopyCommand();
        copy.execute(jTextArea_TextView);
    }//GEN-LAST:event_jMenuItem_CopyActionPerformed

    private void jMenuItem_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_PasteActionPerformed
        EditCommand paste = new PasteCommand();
        paste.execute(jTextArea_TextView);
    }//GEN-LAST:event_jMenuItem_PasteActionPerformed

    private void jMenuItem_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_DeleteActionPerformed
        EditCommand delete = new DeleteCommand();
        delete.execute(jTextArea_TextView);
    }//GEN-LAST:event_jMenuItem_DeleteActionPerformed

    private void jMenuItem_AllSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AllSelectActionPerformed
        EditCommand allSelect = new AllSelectCommand();
        allSelect.execute(jTextArea_TextView);
    }//GEN-LAST:event_jMenuItem_AllSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_ContentBorder;
    private javax.swing.ButtonGroup buttonGroup_ScrollBar;
    private javax.swing.ButtonGroup buttonGroup_Style;
    private javax.swing.JFrame jFrame_Main;
    private javax.swing.JMenuBar jMenuBar_Top;
    private javax.swing.JMenuItem jMenuItem_About;
    private javax.swing.JMenuItem jMenuItem_AllSelect;
    private javax.swing.JMenuItem jMenuItem_Copy;
    private javax.swing.JMenuItem jMenuItem_Cut;
    private javax.swing.JMenuItem jMenuItem_Delete;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenuItem jMenuItem_Linux;
    private javax.swing.JMenuItem jMenuItem_New;
    private javax.swing.JMenuItem jMenuItem_Open;
    private javax.swing.JMenuItem jMenuItem_Paste;
    private javax.swing.JMenuItem jMenuItem_Save;
    private javax.swing.JMenuItem jMenuItem_SaveAs;
    private javax.swing.JMenuItem jMenuItem_SpellChecker;
    private javax.swing.JMenuItem jMenuItem_Tree;
    private javax.swing.JMenuItem jMenuItem_Windows;
    private javax.swing.JMenu jMenu_About;
    private javax.swing.JMenu jMenu_ContentBorder;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Print;
    private javax.swing.JMenu jMenu_ScrollBar;
    private javax.swing.JMenu jMenu_Style;
    private javax.swing.JMenu jMenu_Tools;
    private javax.swing.JMenu jMenu_View;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_AutoWrap;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_Big;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_ContentBorder_Blue;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_ContentBorder_Default;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_H_ScrollBar;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_Medium;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_ScrollBar_Default;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_ScrollBar_Red;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_Small;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem_V_ScrollBar;
    private javax.swing.JScrollPane jScrollPane_TextView;
    private javax.swing.JPopupMenu.Separator jSeparator_Edit;
    private javax.swing.JTextArea jTextArea_TextView;
    // End of variables declaration//GEN-END:variables

}
